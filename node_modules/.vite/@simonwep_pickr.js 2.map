{
  "version": 3,
  "sources": ["../@simonwep/pickr/dist/webpack:/webpack/universalModuleDefinition", "../@simonwep/pickr/dist/webpack:/webpack/bootstrap", "../@simonwep/pickr/dist/webpack:/webpack/runtime/define property getters", "../@simonwep/pickr/dist/webpack:/webpack/runtime/hasOwnProperty shorthand", "../@simonwep/pickr/dist/webpack:/webpack/runtime/make namespace object", "../@simonwep/pickr/dist/webpack:/src/js/utils/utils.js", "../@simonwep/pickr/dist/webpack:/src/js/utils/color.js", "../@simonwep/pickr/dist/webpack:/src/js/utils/hsvacolor.js", "../@simonwep/pickr/dist/webpack:/src/js/libs/moveable.js", "../@simonwep/pickr/dist/webpack:/src/js/libs/selectable.js", "../@simonwep/pickr/dist/webpack:/src/js/template.js", "../@simonwep/pickr/dist/src/NanoPop.ts", "../@simonwep/pickr/dist/webpack:/src/js/pickr.js", "dep:@simonwep_pickr"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Pickr\"] = factory();\n\telse\n\t\troot[\"Pickr\"] = factory();\n})(self, function() {\nreturn ", "// The require scope\nvar __webpack_require__ = {};\n\n", "// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};", "__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))", "// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};", "/* eslint-disable prefer-rest-params */\r\nfunction eventListener(method, elements, events, fn, options = {}) {\r\n\r\n    // Normalize array\r\n    if (elements instanceof HTMLCollection || elements instanceof NodeList) {\r\n        elements = Array.from(elements);\r\n    } else if (!Array.isArray(elements)) {\r\n        elements = [elements];\r\n    }\r\n\r\n    if (!Array.isArray(events)) {\r\n        events = [events];\r\n    }\r\n\r\n    for (const el of elements) {\r\n        for (const ev of events) {\r\n            el[method](ev, fn, {capture: false, ...options});\r\n        }\r\n    }\r\n\r\n    return Array.prototype.slice.call(arguments, 1);\r\n}\r\n\r\n/**\r\n * Add event(s) to element(s).\r\n * @param elements DOM-Elements\r\n * @param events Event names\r\n * @param fn Callback\r\n * @param options Optional options\r\n * @return Array passed arguments\r\n */\r\nexport const on = eventListener.bind(null, 'addEventListener');\r\n\r\n/**\r\n * Remove event(s) from element(s).\r\n * @param elements DOM-Elements\r\n * @param events Event names\r\n * @param fn Callback\r\n * @param options Optional options\r\n * @return Array passed arguments\r\n */\r\nexport const off = eventListener.bind(null, 'removeEventListener');\r\n\r\n/**\r\n * Creates an DOM-Element out of a string (Single element).\r\n * @param html HTML representing a single element\r\n * @returns {Element | null} The element.\r\n */\r\nexport function createElementFromString(html) {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = html.trim();\r\n    return div.firstElementChild;\r\n}\r\n\r\n/**\r\n * Creates a new html element, every element which has\r\n * a ':ref' attribute will be saved in a object (which will be returned)\r\n * where the value of ':ref' is the object-key and the value the HTMLElement.\r\n *\r\n * It's possible to create a hierarchy if you add a ':obj' attribute. Every\r\n * sibling will be added to the object which will get the name from the 'data-con' attribute.\r\n *\r\n * If you want to create an Array out of multiple elements, you can use the ':arr' attribute,\r\n * the value defines the key and all elements, which has the same parent and the same 'data-arr' attribute,\r\n * would be added to it.\r\n *\r\n * @param str - The HTML String.\r\n */\r\n\r\nexport function createFromTemplate(str) {\r\n\r\n    // Removes an attribute from a HTMLElement and returns the value.\r\n    const removeAttribute = (el, name) => {\r\n        const value = el.getAttribute(name);\r\n        el.removeAttribute(name);\r\n        return value;\r\n    };\r\n\r\n    // Recursive function to resolve template\r\n    const resolve = (element, base = {}) => {\r\n\r\n        // Check key and container attribute\r\n        const con = removeAttribute(element, ':obj');\r\n        const key = removeAttribute(element, ':ref');\r\n        const subtree = con ? (base[con] = {}) : base;\r\n\r\n        // Check and save element\r\n        key && (base[key] = element);\r\n        for (const child of Array.from(element.children)) {\r\n            const arr = removeAttribute(child, ':arr');\r\n            const sub = resolve(child, arr ? {} : subtree);\r\n\r\n            if (arr) {\r\n\r\n                // Check if there is already an array and add element\r\n                (subtree[arr] || (subtree[arr] = []))\r\n                    .push(Object.keys(sub).length ? sub : child);\r\n            }\r\n        }\r\n\r\n        return base;\r\n    };\r\n\r\n    return resolve(createElementFromString(str));\r\n}\r\n\r\n/**\r\n * Polyfill for safari & firefox for the eventPath event property.\r\n * @param evt The event object.\r\n * @return [String] event path.\r\n */\r\nexport function eventPath(evt) {\r\n    let path = evt.path || (evt.composedPath && evt.composedPath());\r\n    if (path) {\r\n        return path;\r\n    }\r\n\r\n    let el = evt.target.parentElement;\r\n    path = [evt.target, el];\r\n    while (el = el.parentElement) {\r\n        path.push(el);\r\n    }\r\n\r\n    path.push(document, window);\r\n    return path;\r\n}\r\n\r\n/**\r\n * Resolves a HTMLElement by query.\r\n * @param val\r\n * @returns {null|Document|Element}\r\n */\r\nexport function resolveElement(val) {\r\n    if (val instanceof Element) {\r\n        return val;\r\n    } else if (typeof val === 'string') {\r\n        return val.split(/>>/g).reduce((pv, cv, ci, a) => {\r\n            pv = pv.querySelector(cv);\r\n            return ci < a.length - 1 ? pv.shadowRoot : pv;\r\n        }, document);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Creates the ability to change numbers in an input field with the scroll-wheel.\r\n * @param el\r\n * @param mapper\r\n */\r\nexport function adjustableInputNumbers(el, mapper = v => v) {\r\n\r\n    function handleScroll(e) {\r\n        const inc = ([0.001, 0.01, 0.1])[Number(e.shiftKey || e.ctrlKey * 2)] * (e.deltaY < 0 ? 1 : -1);\r\n\r\n        let index = 0;\r\n        let off = el.selectionStart;\r\n        el.value = el.value.replace(/[\\d.]+/g, (v, i) => {\r\n\r\n            // Check if number is in cursor range and increase it\r\n            if (i <= off && i + v.length >= off) {\r\n                off = i;\r\n                return mapper(Number(v), inc, index);\r\n            }\r\n\r\n            index++;\r\n            return v;\r\n        });\r\n\r\n        el.focus();\r\n        el.setSelectionRange(off, off);\r\n\r\n        // Prevent default and trigger input event\r\n        e.preventDefault();\r\n        el.dispatchEvent(new Event('input'));\r\n    }\r\n\r\n    // Bind events\r\n    on(el, 'focus', () => on(window, 'wheel', handleScroll, {passive: false}));\r\n    on(el, 'blur', () => off(window, 'wheel', handleScroll));\r\n}\r\n", "// Shorthands\r\nconst {min, max, floor, round} = Math;\r\n\r\n/**\r\n * Tries to convert a color name to rgb/a hex representation\r\n * @param name\r\n * @returns {string | CanvasGradient | CanvasPattern}\r\n */\r\nfunction standardizeColor(name) {\r\n\r\n    // Since invalid color's will be parsed as black, filter them out\r\n    if (name.toLowerCase() === 'black') {\r\n        return '#000';\r\n    }\r\n\r\n    const ctx = document.createElement('canvas').getContext('2d');\r\n    ctx.fillStyle = name;\r\n    return ctx.fillStyle === '#000' ? null : ctx.fillStyle;\r\n}\r\n\r\n/**\r\n * Convert HSV spectrum to RGB.\r\n * @param h Hue\r\n * @param s Saturation\r\n * @param v Value\r\n * @returns {number[]} Array with rgb values.\r\n */\r\nexport function hsvToRgb(h, s, v) {\r\n    h = (h / 360) * 6;\r\n    s /= 100;\r\n    v /= 100;\r\n\r\n    const i = floor(h);\r\n\r\n    const f = h - i;\r\n    const p = v * (1 - s);\r\n    const q = v * (1 - f * s);\r\n    const t = v * (1 - (1 - f) * s);\r\n\r\n    const mod = i % 6;\r\n    const r = [v, q, p, p, t, v][mod];\r\n    const g = [t, v, v, q, p, p][mod];\r\n    const b = [p, p, t, v, v, q][mod];\r\n\r\n    return [\r\n        r * 255,\r\n        g * 255,\r\n        b * 255\r\n    ];\r\n}\r\n\r\n/**\r\n * Convert HSV spectrum to Hex.\r\n * @param h Hue\r\n * @param s Saturation\r\n * @param v Value\r\n * @returns {string[]} Hex values\r\n */\r\nexport function hsvToHex(h, s, v) {\r\n    return hsvToRgb(h, s, v).map(v =>\r\n        round(v).toString(16).padStart(2, '0')\r\n    );\r\n}\r\n\r\n/**\r\n * Convert HSV spectrum to CMYK.\r\n * @param h Hue\r\n * @param s Saturation\r\n * @param v Value\r\n * @returns {number[]} CMYK values\r\n */\r\nexport function hsvToCmyk(h, s, v) {\r\n    const rgb = hsvToRgb(h, s, v);\r\n    const r = rgb[0] / 255;\r\n    const g = rgb[1] / 255;\r\n    const b = rgb[2] / 255;\r\n\r\n    const k = min(1 - r, 1 - g, 1 - b);\r\n    const c = k === 1 ? 0 : (1 - r - k) / (1 - k);\r\n    const m = k === 1 ? 0 : (1 - g - k) / (1 - k);\r\n    const y = k === 1 ? 0 : (1 - b - k) / (1 - k);\r\n\r\n    return [\r\n        c * 100,\r\n        m * 100,\r\n        y * 100,\r\n        k * 100\r\n    ];\r\n}\r\n\r\n/**\r\n * Convert HSV spectrum to HSL.\r\n * @param h Hue\r\n * @param s Saturation\r\n * @param v Value\r\n * @returns {number[]} HSL values\r\n */\r\nexport function hsvToHsl(h, s, v) {\r\n    s /= 100;\r\n    v /= 100;\r\n\r\n    const l = (2 - s) * v / 2;\r\n\r\n    if (l !== 0) {\r\n        if (l === 1) {\r\n            s = 0;\r\n        } else if (l < 0.5) {\r\n            s = s * v / (l * 2);\r\n        } else {\r\n            s = s * v / (2 - l * 2);\r\n        }\r\n    }\r\n\r\n    return [\r\n        h,\r\n        s * 100,\r\n        l * 100\r\n    ];\r\n}\r\n\r\n/**\r\n * Convert RGB to HSV.\r\n * @param r Red\r\n * @param g Green\r\n * @param b Blue\r\n * @return {number[]} HSV values.\r\n */\r\nfunction rgbToHsv(r, g, b) {\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n\r\n    const minVal = min(r, g, b);\r\n    const maxVal = max(r, g, b);\r\n    const delta = maxVal - minVal;\r\n\r\n    let h, s;\r\n    const v = maxVal;\r\n    if (delta === 0) {\r\n        h = s = 0;\r\n    } else {\r\n        s = delta / maxVal;\r\n        const dr = (((maxVal - r) / 6) + (delta / 2)) / delta;\r\n        const dg = (((maxVal - g) / 6) + (delta / 2)) / delta;\r\n        const db = (((maxVal - b) / 6) + (delta / 2)) / delta;\r\n\r\n        if (r === maxVal) {\r\n            h = db - dg;\r\n        } else if (g === maxVal) {\r\n            h = (1 / 3) + dr - db;\r\n        } else if (b === maxVal) {\r\n            h = (2 / 3) + dg - dr;\r\n        }\r\n\r\n        if (h < 0) {\r\n            h += 1;\r\n        } else if (h > 1) {\r\n            h -= 1;\r\n        }\r\n    }\r\n\r\n    return [\r\n        h * 360,\r\n        s * 100,\r\n        v * 100\r\n    ];\r\n}\r\n\r\n/**\r\n * Convert CMYK to HSV.\r\n * @param c Cyan\r\n * @param m Magenta\r\n * @param y Yellow\r\n * @param k Key (Black)\r\n * @return {number[]} HSV values.\r\n */\r\nfunction cmykToHsv(c, m, y, k) {\r\n    c /= 100;\r\n    m /= 100;\r\n    y /= 100;\r\n    k /= 100;\r\n\r\n    const r = (1 - min(1, c * (1 - k) + k)) * 255;\r\n    const g = (1 - min(1, m * (1 - k) + k)) * 255;\r\n    const b = (1 - min(1, y * (1 - k) + k)) * 255;\r\n\r\n    return [...rgbToHsv(r, g, b)];\r\n}\r\n\r\n/**\r\n * Convert HSL to HSV.\r\n * @param h Hue\r\n * @param s Saturation\r\n * @param l Lightness\r\n * @return {number[]} HSV values.\r\n */\r\nfunction hslToHsv(h, s, l) {\r\n    s /= 100;\r\n    l /= 100;\r\n    s *= l < 0.5 ? l : 1 - l;\r\n\r\n    const ns = (2 * s / (l + s)) * 100;\r\n    const v = (l + s) * 100;\r\n    return [h, isNaN(ns) ? 0 : ns, v];\r\n}\r\n\r\n/**\r\n * Convert HEX to HSV.\r\n * @param hex Hexadecimal string of rgb colors, can have length 3 or 6.\r\n * @return {number[]} HSV values.\r\n */\r\nfunction hexToHsv(hex) {\r\n    return rgbToHsv(...hex.match(/.{2}/g).map(v => parseInt(v, 16)));\r\n}\r\n\r\n/**\r\n * Try's to parse a string which represents a color to a HSV array.\r\n * Current supported types are cmyk, rgba, hsla and hexadecimal.\r\n * @param str\r\n * @return {*}\r\n */\r\nexport function parseToHSVA(str) {\r\n\r\n    // Check if string is a color-name\r\n    str = str.match(/^[a-zA-Z]+$/) ? standardizeColor(str) : str;\r\n\r\n    // Regular expressions to match different types of color represention\r\n    const regex = {\r\n        cmyk: /^cmyk[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)/i,\r\n        rgba: /^((rgba)|rgb)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]*?([\\d.]+|$)/i,\r\n        hsla: /^((hsla)|hsl)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]*?([\\d.]+|$)/i,\r\n        hsva: /^((hsva)|hsv)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]*?([\\d.]+|$)/i,\r\n        hexa: /^#?(([\\dA-Fa-f]{3,4})|([\\dA-Fa-f]{6})|([\\dA-Fa-f]{8}))$/i\r\n    };\r\n\r\n    /**\r\n     * Takes an Array of any type, convert strings which represents\r\n     * a number to a number an anything else to undefined.\r\n     * @param array\r\n     * @return {*}\r\n     */\r\n    const numarize = array => array.map(v => /^(|\\d+)\\.\\d+|\\d+$/.test(v) ? Number(v) : undefined);\r\n\r\n    let match;\r\n    invalid: for (const type in regex) {\r\n\r\n        // Check if current scheme passed\r\n        if (!(match = regex[type].exec(str))) {\r\n            continue;\r\n        }\r\n\r\n        // Match[2] does only contain a truly value if rgba, hsla, or hsla got matched\r\n        const alphaValid = a => (!!match[2] === (typeof a === 'number'));\r\n\r\n        // Try to convert\r\n        switch (type) {\r\n            case 'cmyk': {\r\n                const [, c, m, y, k] = numarize(match);\r\n\r\n                if (c > 100 || m > 100 || y > 100 || k > 100) {\r\n                    break invalid;\r\n                }\r\n\r\n                return {values: cmykToHsv(c, m, y, k), type};\r\n            }\r\n            case 'rgba': {\r\n                const [, , , r, g, b, a] = numarize(match);\r\n\r\n                if (r > 255 || g > 255 || b > 255 || a < 0 || a > 1 || !alphaValid(a)) {\r\n                    break invalid;\r\n                }\r\n\r\n                return {values: [...rgbToHsv(r, g, b), a], a, type};\r\n            }\r\n            case 'hexa': {\r\n                let [, hex] = match;\r\n\r\n                if (hex.length === 4 || hex.length === 3) {\r\n                    hex = hex.split('').map(v => v + v).join('');\r\n                }\r\n\r\n                const raw = hex.substring(0, 6);\r\n                let a = hex.substring(6);\r\n\r\n                // Convert 0 - 255 to 0 - 1 for opacity\r\n                a = a ? (parseInt(a, 16) / 255) : undefined;\r\n\r\n                return {values: [...hexToHsv(raw), a], a, type};\r\n            }\r\n            case 'hsla': {\r\n                const [, , , h, s, l, a] = numarize(match);\r\n\r\n                if (h > 360 || s > 100 || l > 100 || a < 0 || a > 1 || !alphaValid(a)) {\r\n                    break invalid;\r\n                }\r\n\r\n                return {values: [...hslToHsv(h, s, l), a], a, type};\r\n            }\r\n            case 'hsva': {\r\n                const [, , , h, s, v, a] = numarize(match);\r\n\r\n                if (h > 360 || s > 100 || v > 100 || a < 0 || a > 1 || !alphaValid(a)) {\r\n                    break invalid;\r\n                }\r\n\r\n                return {values: [h, s, v, a], a, type};\r\n            }\r\n        }\r\n    }\r\n\r\n    return {values: null, type: null};\r\n}\r\n", "import {hsvToCmyk, hsvToHex, hsvToHsl, hsvToRgb} from './color';\r\n\r\n/**\r\n * Simple class which holds the properties\r\n * of the color represention model hsla (hue saturation lightness alpha)\r\n */\r\nexport function HSVaColor(h = 0, s = 0, v = 0, a = 1) {\r\n    const mapper = (original, next) => (precision = -1) => {\r\n        return next(~precision ? original.map(v => Number(v.toFixed(precision))) : original);\r\n    };\r\n\r\n    const that = {\r\n        h, s, v, a,\r\n\r\n        toHSVA() {\r\n            const hsva = [that.h, that.s, that.v, that.a];\r\n            hsva.toString = mapper(hsva, arr => `hsva(${arr[0]}, ${arr[1]}%, ${arr[2]}%, ${that.a})`);\r\n            return hsva;\r\n        },\r\n\r\n        toHSLA() {\r\n            const hsla = [...hsvToHsl(that.h, that.s, that.v), that.a];\r\n            hsla.toString = mapper(hsla, arr => `hsla(${arr[0]}, ${arr[1]}%, ${arr[2]}%, ${that.a})`);\r\n            return hsla;\r\n        },\r\n\r\n        toRGBA() {\r\n            const rgba = [...hsvToRgb(that.h, that.s, that.v), that.a];\r\n            rgba.toString = mapper(rgba, arr => `rgba(${arr[0]}, ${arr[1]}, ${arr[2]}, ${that.a})`);\r\n            return rgba;\r\n        },\r\n\r\n        toCMYK() {\r\n            const cmyk = hsvToCmyk(that.h, that.s, that.v);\r\n            cmyk.toString = mapper(cmyk, arr => `cmyk(${arr[0]}%, ${arr[1]}%, ${arr[2]}%, ${arr[3]}%)`);\r\n            return cmyk;\r\n        },\r\n\r\n        toHEXA() {\r\n            const hex = hsvToHex(that.h, that.s, that.v);\r\n\r\n            // Check if alpha channel make sense, convert it to 255 number space, convert\r\n            // To hex and pad it with zeros if needet.\r\n            const alpha = that.a >= 1 ? '' : Number((that.a * 255).toFixed(0))\r\n                .toString(16)\r\n                .toUpperCase().padStart(2, '0');\r\n\r\n            alpha && hex.push(alpha);\r\n            hex.toString = () => `#${hex.join('').toUpperCase()}`;\r\n            return hex;\r\n        },\r\n\r\n        clone: () => HSVaColor(that.h, that.s, that.v, that.a)\r\n    };\r\n\r\n    return that;\r\n}\r\n", "import * as _ from '../utils/utils';\r\n\r\nconst clamp = v => Math.max(Math.min(v, 1), 0);\r\nexport default function Moveable(opt) {\r\n\r\n    const that = {\r\n\r\n        // Assign default values\r\n        options: Object.assign({\r\n            lock: null,\r\n            onchange: () => 0,\r\n            onstop: () => 0\r\n        }, opt),\r\n\r\n        _keyboard(e) {\r\n            const {options} = that;\r\n            const {type, key} = e;\r\n\r\n            // Check to see if the Movable is focused and then move it based on arrow key inputs\r\n            // For improved accessibility\r\n            if (document.activeElement === options.wrapper) {\r\n                const {lock} = that.options;\r\n                const up = key === 'ArrowUp';\r\n                const right = key === 'ArrowRight';\r\n                const down = key === 'ArrowDown';\r\n                const left = key === 'ArrowLeft';\r\n\r\n                if (type === 'keydown' && (up || right || down || left)) {\r\n                    let xm = 0;\r\n                    let ym = 0;\r\n\r\n                    if (lock === 'v') {\r\n                        xm = (up || right) ? 1 : -1;\r\n                    } else if (lock === 'h') {\r\n                        xm = (up || right) ? -1 : 1;\r\n                    } else {\r\n                        ym = up ? -1 : (down ? 1 : 0);\r\n                        xm = left ? -1 : (right ? 1 : 0);\r\n                    }\r\n\r\n                    that.update(\r\n                        clamp(that.cache.x + (0.01 * xm)),\r\n                        clamp(that.cache.y + (0.01 * ym))\r\n                    );\r\n                    e.preventDefault();\r\n                } else if (key.startsWith('Arrow')) {\r\n                    that.options.onstop();\r\n                    e.preventDefault();\r\n                }\r\n            }\r\n        },\r\n\r\n        _tapstart(evt) {\r\n            _.on(document, ['mouseup', 'touchend', 'touchcancel'], that._tapstop);\r\n            _.on(document, ['mousemove', 'touchmove'], that._tapmove);\r\n\r\n            if (evt.cancelable) {\r\n                evt.preventDefault();\r\n            }\r\n\r\n            // Trigger\r\n            that._tapmove(evt);\r\n        },\r\n\r\n        _tapmove(evt) {\r\n            const {options, cache} = that;\r\n            const {lock, element, wrapper} = options;\r\n            const b = wrapper.getBoundingClientRect();\r\n\r\n            let x = 0, y = 0;\r\n            if (evt) {\r\n                const touch = evt && evt.touches && evt.touches[0];\r\n                x = evt ? (touch || evt).clientX : 0;\r\n                y = evt ? (touch || evt).clientY : 0;\r\n\r\n                // Reset to bounds\r\n                if (x < b.left) {\r\n                    x = b.left;\r\n                } else if (x > b.left + b.width) {\r\n                    x = b.left + b.width;\r\n                }\r\n                if (y < b.top) {\r\n                    y = b.top;\r\n                } else if (y > b.top + b.height) {\r\n                    y = b.top + b.height;\r\n                }\r\n\r\n                // Normalize\r\n                x -= b.left;\r\n                y -= b.top;\r\n            } else if (cache) {\r\n                x = cache.x * b.width;\r\n                y = cache.y * b.height;\r\n            }\r\n\r\n            if (lock !== 'h') {\r\n                element.style.left = `calc(${x / b.width * 100}% - ${element.offsetWidth / 2}px)`;\r\n            }\r\n\r\n            if (lock !== 'v') {\r\n                element.style.top = `calc(${y / b.height * 100}% - ${element.offsetHeight / 2}px)`;\r\n            }\r\n\r\n            that.cache = {x: x / b.width, y: y / b.height};\r\n            const cx = clamp(x / b.width);\r\n            const cy = clamp(y / b.height);\r\n\r\n            switch (lock) {\r\n                case 'v':\r\n                    return options.onchange(cx);\r\n                case 'h':\r\n                    return options.onchange(cy);\r\n                default:\r\n                    return options.onchange(cx, cy);\r\n            }\r\n        },\r\n\r\n        _tapstop() {\r\n            that.options.onstop();\r\n            _.off(document, ['mouseup', 'touchend', 'touchcancel'], that._tapstop);\r\n            _.off(document, ['mousemove', 'touchmove'], that._tapmove);\r\n        },\r\n\r\n        trigger() {\r\n            that._tapmove();\r\n        },\r\n\r\n        update(x = 0, y = 0) {\r\n            const {left, top, width, height} = that.options.wrapper.getBoundingClientRect();\r\n\r\n            if (that.options.lock === 'h') {\r\n                y = x;\r\n            }\r\n\r\n            that._tapmove({\r\n                clientX: left + width * x,\r\n                clientY: top + height * y\r\n            });\r\n        },\r\n\r\n        destroy() {\r\n            const {options, _tapstart, _keyboard} = that;\r\n            _.off(document, ['keydown', 'keyup'], _keyboard);\r\n            _.off([options.wrapper, options.element], 'mousedown', _tapstart);\r\n            _.off([options.wrapper, options.element], 'touchstart', _tapstart, {\r\n                passive: false\r\n            });\r\n        }\r\n    };\r\n\r\n    // Initilize\r\n    const {options, _tapstart, _keyboard} = that;\r\n    _.on([options.wrapper, options.element], 'mousedown', _tapstart);\r\n    _.on([options.wrapper, options.element], 'touchstart', _tapstart, {\r\n        passive: false\r\n    });\r\n\r\n    _.on(document, ['keydown', 'keyup'], _keyboard);\r\n\r\n    return that;\r\n}\r\n", "import * as _ from '../utils/utils';\n\nexport default function Selectable(opt = {}) {\n    opt = Object.assign({\n        onchange: () => 0,\n        className: '',\n        elements: []\n    }, opt);\n\n    const onTap = _.on(opt.elements, 'click', evt => {\n        opt.elements.forEach(e =>\n            e.classList[evt.target === e ? 'add' : 'remove'](opt.className)\n        );\n\n        opt.onchange(evt);\n\n        // Fix for https://github.com/Simonwep/pickr/issues/243\n        evt.stopPropagation();\n    });\n\n    return {\n        destroy: () => _.off(...onTap)\n    };\n}\n", "import * as _ from './utils/utils';\r\n\r\nexport default instance => {\r\n\r\n    const {\r\n        components,\r\n        useAsButton,\r\n        inline,\r\n        appClass,\r\n        theme,\r\n        lockOpacity\r\n    } = instance.options;\r\n\r\n    // Utils\r\n    const hidden = con => con ? '' : 'style=\"display:none\" hidden';\r\n    const t = str => instance._t(str);\r\n\r\n    const root = _.createFromTemplate(`\r\n      <div :ref=\"root\" class=\"pickr\">\r\n\r\n        ${useAsButton ? '' : '<button type=\"button\" :ref=\"button\" class=\"pcr-button\"></button>'}\r\n\r\n        <div :ref=\"app\" class=\"pcr-app ${appClass || ''}\" data-theme=\"${theme}\" ${inline ? 'style=\"position: unset\"' : ''} aria-label=\"${t('ui:dialog', 'color picker dialog')}\" role=\"window\">\r\n          <div class=\"pcr-selection\" ${hidden(components.palette)}>\r\n            <div :obj=\"preview\" class=\"pcr-color-preview\" ${hidden(components.preview)}>\r\n              <button type=\"button\" :ref=\"lastColor\" class=\"pcr-last-color\" aria-label=\"${t('btn:last-color')}\"></button>\r\n              <div :ref=\"currentColor\" class=\"pcr-current-color\"></div>\r\n            </div>\r\n\r\n            <div :obj=\"palette\" class=\"pcr-color-palette\">\r\n              <div :ref=\"picker\" class=\"pcr-picker\"></div>\r\n              <div :ref=\"palette\" class=\"pcr-palette\" tabindex=\"0\" aria-label=\"${t('aria:palette')}\" role=\"listbox\"></div>\r\n            </div>\r\n\r\n            <div :obj=\"hue\" class=\"pcr-color-chooser\" ${hidden(components.hue)}>\r\n              <div :ref=\"picker\" class=\"pcr-picker\"></div>\r\n              <div :ref=\"slider\" class=\"pcr-hue pcr-slider\" tabindex=\"0\" aria-label=\"${t('aria:hue')}\" role=\"slider\"></div>\r\n            </div>\r\n\r\n            <div :obj=\"opacity\" class=\"pcr-color-opacity\" ${hidden(components.opacity)}>\r\n              <div :ref=\"picker\" class=\"pcr-picker\"></div>\r\n              <div :ref=\"slider\" class=\"pcr-opacity pcr-slider\" tabindex=\"0\" aria-label=\"${t('aria:opacity', 'opacity selection slider')}\" role=\"slider\"></div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"pcr-swatches ${components.palette ? '' : 'pcr-last'}\" :ref=\"swatches\"></div>\r\n\r\n          <div :obj=\"interaction\" class=\"pcr-interaction\" ${hidden(Object.keys(components.interaction).length)}>\r\n            <input :ref=\"result\" class=\"pcr-result\" type=\"text\" spellcheck=\"false\" ${hidden(components.interaction.input)} aria-label=\"${t('aria:input', 'color input field')}\">\r\n\r\n            <input :arr=\"options\" class=\"pcr-type\" data-type=\"HEXA\" value=\"${lockOpacity ? 'HEX' : 'HEXA'}\" type=\"button\" ${hidden(components.interaction.hex)}>\r\n            <input :arr=\"options\" class=\"pcr-type\" data-type=\"RGBA\" value=\"${lockOpacity ? 'RGB' : 'RGBA'}\" type=\"button\" ${hidden(components.interaction.rgba)}>\r\n            <input :arr=\"options\" class=\"pcr-type\" data-type=\"HSLA\" value=\"${lockOpacity ? 'HSL' : 'HSLA'}\" type=\"button\" ${hidden(components.interaction.hsla)}>\r\n            <input :arr=\"options\" class=\"pcr-type\" data-type=\"HSVA\" value=\"${lockOpacity ? 'HSV' : 'HSVA'}\" type=\"button\" ${hidden(components.interaction.hsva)}>\r\n            <input :arr=\"options\" class=\"pcr-type\" data-type=\"CMYK\" value=\"CMYK\" type=\"button\" ${hidden(components.interaction.cmyk)}>\r\n\r\n            <input :ref=\"save\" class=\"pcr-save\" value=\"${t('btn:save')}\" type=\"button\" ${hidden(components.interaction.save)} aria-label=\"${t('aria:btn:save')}\">\r\n            <input :ref=\"cancel\" class=\"pcr-cancel\" value=\"${t('btn:cancel')}\" type=\"button\" ${hidden(components.interaction.cancel)} aria-label=\"${t('aria:btn:cancel')}\">\r\n            <input :ref=\"clear\" class=\"pcr-clear\" value=\"${t('btn:clear')}\" type=\"button\" ${hidden(components.interaction.clear)} aria-label=\"${t('aria:btn:clear')}\">\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `);\r\n\r\n    const int = root.interaction;\r\n\r\n    // Select option which is not hidden\r\n    int.options.find(o => !o.hidden && !o.classList.add('active'));\r\n\r\n    // Append method to find currently active option\r\n    int.type = () => int.options.find(e => e.classList.contains('active'));\r\n    return root;\r\n};\r\n", "type Direction = 'top' | 'left' | 'bottom' | 'right';\n\nexport type VariantFlipOrder = {\n    start: string;\n    middle: string;\n    end: string;\n};\n\nexport type PositionFlipOrder = {\n    top: string;\n    right: string;\n    bottom: string;\n    left: string;\n};\n\nexport type NanoPopPosition =\n    'top-start' | 'top-middle' | 'top-end' |\n    'left-start' | 'left-middle' | 'left-end' |\n    'right-start' | 'right-middle' | 'right-end' |\n    'bottom-start' | 'bottom-middle' | 'bottom-end' | Direction;\n\nexport type NanoPopOptions = {\n    container: DOMRect;\n    position: NanoPopPosition;\n    variantFlipOrder: VariantFlipOrder;\n    positionFlipOrder: PositionFlipOrder;\n    margin: number;\n    reference?: HTMLElement;\n    popper?: HTMLElement;\n};\n\ntype AvailablePositions = {\n    t: number;\n    b: number;\n    l: number;\n    r: number;\n};\n\ntype AvailableVariants = {\n    vs: number;\n    vm: number;\n    ve: number;\n    hs: number;\n    hm: number;\n    he: number;\n};\n\ntype PositionPairs = [Direction, Direction];\nexport type PositionMatch = 'ts' | 'tm' | 'te' | 'bs' | 'bm' | 'be' | 'ls' | 'lm' | 'le' | 'rs' | 'rm' | 're';\n\nexport interface NanoPop {\n    update(updatedOptions?: Partial<NanoPopOptions>): PositionMatch | null;\n}\n\nexport interface NanoPopConstructor {\n\n    /**\n     * @param reference Reference element\n     * @param popper Actual popper element\n     * @param options Optional options\n     */\n    (reference: HTMLElement, popper: HTMLElement, options?: Partial<NanoPopOptions>): NanoPop;\n\n    /**\n     * @param options Partial options which get merged with the current one\n     */\n    (options?: Partial<NanoPopOptions>): NanoPop;\n}\n\n// Export current version\nexport const version = VERSION;\n\n// Export default\nexport const defaults = {\n    variantFlipOrder: {start: 'sme', middle: 'mse', end: 'ems'},\n    positionFlipOrder: {top: 'tbrl', right: 'rltb', bottom: 'btrl', left: 'lrbt'},\n    position: 'bottom',\n    margin: 8\n};\n\n/**\n * Repositions an element once using the provided options and elements.\n * @param reference Reference element\n * @param popper Popper element\n * @param opt Optional, additional options\n */\nexport const reposition = (\n    reference: HTMLElement,\n    popper: HTMLElement,\n    opt?: Partial<NanoPopOptions>\n): PositionMatch | null => {\n    const {\n        container,\n        margin,\n        position,\n        variantFlipOrder,\n        positionFlipOrder\n    } = {\n        container: document.documentElement.getBoundingClientRect(),\n        ...defaults,\n        ...opt\n    };\n\n    /**\n     * Reset position to resolve viewport\n     * See https://developer.mozilla.org/en-US/docs/Web/CSS/position#fixed\n     */\n    const {left: originalLeft, top: originalTop} = popper.style;\n    popper.style.left = '0';\n    popper.style.top = '0';\n\n    const refBox = reference.getBoundingClientRect();\n    const popBox = popper.getBoundingClientRect();\n\n    /**\n     * Holds coordinates of top, left, bottom and right alignment\n     */\n    const positionStore: AvailablePositions = {\n        t: refBox.top - popBox.height - margin,\n        b: refBox.bottom + margin,\n        r: refBox.right + margin,\n        l: refBox.left - popBox.width - margin\n    };\n\n    /**\n     * Holds corresponding variants (start, middle, end).\n     * The values depend on horizontal / vertical orientation\n     */\n    const variantStore: AvailableVariants = {\n        vs: refBox.left,\n        vm: refBox.left + refBox.width / 2 + -popBox.width / 2,\n        ve: refBox.left + refBox.width - popBox.width,\n        hs: refBox.top,\n        hm: refBox.bottom - refBox.height / 2 - popBox.height / 2,\n        he: refBox.bottom - popBox.height\n    };\n\n    // Extract position and variant\n    // Top-start -> top is \"position\" and \"start\" is the variant\n    const [posKey, varKey = 'middle'] = position.split('-');\n    const positions = positionFlipOrder[posKey as keyof PositionFlipOrder];\n    const variants = variantFlipOrder[varKey as keyof VariantFlipOrder];\n\n    // Try out all possible combinations, starting with the preferred one.\n    const {top, left, bottom, right} = container;\n\n    for (const p of positions) {\n        const vertical = (p === 't' || p === 'b');\n\n        // The position-value\n        const positionVal = positionStore[p as keyof AvailablePositions];\n\n        // Which property has to be changes.\n        const [positionKey, variantKey] = (vertical ? ['top', 'left'] : ['left', 'top']) as PositionPairs;\n\n        /**\n         * box refers to the size of the popper element. Depending on the orientation this is width or height.\n         * The limit is the corresponding, maximum value for this position.\n         */\n        const [positionSize, variantSize] = vertical ? [popBox.height, popBox.width] : [popBox.width, popBox.height];\n        const [positionMaximum, variantMaximum] = vertical ? [bottom, right] : [right, bottom];\n        const [positionMinimum, variantMinimum] = vertical ? [top, left] : [left, top];\n\n        // Skip pre-clipped values\n        if (positionVal < positionMinimum || (positionVal + positionSize) > positionMaximum) {\n            continue;\n        }\n\n        for (const v of variants) {\n\n            // The position-value, the related size value of the popper and the limit\n            const variantVal = variantStore[((vertical ? 'v' : 'h') + v) as keyof AvailableVariants];\n\n            if (variantVal < variantMinimum || (variantVal + variantSize) > variantMaximum) {\n                continue;\n            }\n\n            // Apply styles and normalize viewport\n            popper.style[variantKey] = `${variantVal - popBox[variantKey]}px`;\n            popper.style[positionKey] = `${positionVal - popBox[positionKey]}px`;\n            return (p + v) as PositionMatch;\n        }\n    }\n\n    // Revert style values (won't work with styled-elements or similar systems)\n    // \"Fix\" for https://github.com/Simonwep/nanopop/issues/7\n    popper.style.left = originalLeft;\n    popper.style.top = originalTop;\n\n    return null;\n};\n\n/**\n * Creates a stateful popper.\n * You can either...\n * ... pass an options object: createPopper(<options>)\n * ... pass both the reference and popper: create(<ref>, <el>, <?options>)\n * ... pass nothing, in this case you'll have to set at least both a reference and a popper in update.\n *\n * @param reference | options Reference element or options\n * @param popper Popper element\n * @param options Optional additional options\n */\nexport const createPopper: NanoPopConstructor = (\n    reference?: HTMLElement | Partial<NanoPopOptions>,\n    popper?: HTMLElement,\n    options?: Partial<NanoPopOptions>\n): NanoPop => {\n\n    // Resolve options\n    const baseOptions: Partial<NanoPopOptions> = typeof reference === 'object' && !(reference instanceof HTMLElement) ?\n        reference : {reference, popper, ...options};\n\n    return {\n\n        /**\n         * Repositions the current popper.\n         * @param options Optional options which get merged with the current ones.\n         */\n        update(options: Partial<NanoPopOptions> = baseOptions): PositionMatch | null {\n            const {reference, popper} = Object.assign(baseOptions, options);\n\n            if (!popper || !reference) {\n                throw new Error('Popper- or reference-element missing.');\n            }\n\n            return reposition(reference, popper, baseOptions);\n        }\n    };\n};\n", "import * as _ from './utils/utils';\nimport {parseToHSVA} from './utils/color';\nimport {HSVaColor} from './utils/hsvacolor';\nimport Moveable from './libs/moveable';\nimport Selectable from './libs/selectable';\nimport buildPickr from './template';\nimport {createPopper} from 'nanopop';\n\nexport default class Pickr {\n\n    // Expose pickr utils\n    static utils = _;\n\n    // Assign version and export\n    static version = VERSION;\n\n    // Default strings\n    static I18N_DEFAULTS = {\n\n        // Strings visible in the UI\n        'ui:dialog': 'color picker dialog',\n        'btn:toggle': 'toggle color picker dialog',\n        'btn:swatch': 'color swatch',\n        'btn:last-color': 'use previous color',\n        'btn:save': 'Save',\n        'btn:cancel': 'Cancel',\n        'btn:clear': 'Clear',\n\n        // Strings used for aria-labels\n        'aria:btn:save': 'save and close',\n        'aria:btn:cancel': 'cancel and close',\n        'aria:btn:clear': 'clear and close',\n        'aria:input': 'color input field',\n        'aria:palette': 'color selection area',\n        'aria:hue': 'hue selection slider',\n        'aria:opacity': 'selection slider'\n    };\n\n    // Default options\n    static DEFAULT_OPTIONS = {\n        appClass: null,\n        theme: 'classic',\n        useAsButton: false,\n        padding: 8,\n        disabled: false,\n        comparison: true,\n        closeOnScroll: false,\n        outputPrecision: 0,\n        lockOpacity: false,\n        autoReposition: true,\n        container: 'body',\n\n        components: {\n            interaction: {}\n        },\n\n        i18n: {},\n        swatches: null,\n        inline: false,\n        sliders: null,\n\n        default: '#42445a',\n        defaultRepresentation: null,\n        position: 'bottom-middle',\n        adjustableNumbers: true,\n        showAlways: false,\n\n        closeWithKey: 'Escape'\n    };\n\n    // Will be used to prevent specific actions during initilization\n    _initializingActive = true;\n\n    // If the current color value should be recalculated\n    _recalc = true;\n\n    // Positioning engine and DOM-Tree\n    _nanopop = null;\n    _root = null;\n\n    // Current and last color for comparison\n    _color = HSVaColor();\n    _lastColor = HSVaColor();\n    _swatchColors = [];\n\n    // Animation frame used for setup.\n    // Will be cancelled in case of destruction.\n    _setupAnimationFrame = null;\n\n    // Evenlistener name: [callbacks]\n    _eventListener = {\n        init: [],\n        save: [],\n        hide: [],\n        show: [],\n        clear: [],\n        change: [],\n        changestop: [],\n        cancel: [],\n        swatchselect: []\n    };\n\n    constructor(opt) {\n\n        // Assign default values\n        this.options = opt = Object.assign({...Pickr.DEFAULT_OPTIONS}, opt);\n\n        const {swatches, components, theme, sliders, lockOpacity, padding} = opt;\n\n        if (['nano', 'monolith'].includes(theme) && !sliders) {\n            opt.sliders = 'h';\n        }\n\n        // Check interaction section\n        if (!components.interaction) {\n            components.interaction = {};\n        }\n\n        // Overwrite palette if preview, opacity or hue are true\n        const {preview, opacity, hue, palette} = components;\n        components.opacity = (!lockOpacity && opacity);\n        components.palette = palette || preview || opacity || hue;\n\n        // Initialize picker\n        this._preBuild();\n        this._buildComponents();\n        this._bindEvents();\n        this._finalBuild();\n\n        // Append pre-defined swatch colors\n        if (swatches && swatches.length) {\n            swatches.forEach(color => this.addSwatch(color));\n        }\n\n        // Initialize positioning engine\n        const {button, app} = this._root;\n        this._nanopop = createPopper(button, app, {\n            margin: padding\n        });\n\n        // Initialize accessibility\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', this._t('btn:toggle'));\n\n        // Initilization is finish, pickr is visible and ready for usage\n        const that = this;\n        this._setupAnimationFrame = requestAnimationFrame((function cb() {\n\n            // TODO: Performance issue due to high call-rate?\n            if (!app.offsetWidth) {\n                return requestAnimationFrame(cb);\n            }\n\n            // Apply default color\n            that.setColor(opt.default);\n            that._rePositioningPicker();\n\n            // Initialize color representation\n            if (opt.defaultRepresentation) {\n                that._representation = opt.defaultRepresentation;\n                that.setColorRepresentation(that._representation);\n            }\n\n            // Show pickr if locked\n            if (opt.showAlways) {\n                that.show();\n            }\n\n            // Initialization is done - pickr is usable, fire init event\n            that._initializingActive = false;\n            that._emit('init');\n        }));\n    }\n\n    // Create instance via method\n    static create = options => new Pickr(options);\n\n    // Does only the absolutly basic thing to initialize the components\n    _preBuild() {\n        const {options} = this;\n\n        // Resolve elements\n        for (const type of ['el', 'container']) {\n            options[type] = _.resolveElement(options[type]);\n        }\n\n        // Create element and append it to body to\n        // Prevent initialization errors\n        this._root = buildPickr(this);\n\n        // Check if a custom button is used\n        if (options.useAsButton) {\n            this._root.button = options.el; // Replace button with customized button\n        }\n\n        options.container.appendChild(this._root.root);\n    }\n\n    _finalBuild() {\n        const opt = this.options;\n        const root = this._root;\n\n        // Remove from body\n        opt.container.removeChild(root.root);\n\n        if (opt.inline) {\n            const parent = opt.el.parentElement;\n\n            if (opt.el.nextSibling) {\n                parent.insertBefore(root.app, opt.el.nextSibling);\n            } else {\n                parent.appendChild(root.app);\n            }\n        } else {\n            opt.container.appendChild(root.app);\n        }\n\n        // Don't replace the the element if a custom button is used\n        if (!opt.useAsButton) {\n\n            // Replace element with actual color-picker\n            opt.el.parentNode.replaceChild(root.root, opt.el);\n        } else if (opt.inline) {\n            opt.el.remove();\n        }\n\n        // Check if it should be immediatly disabled\n        if (opt.disabled) {\n            this.disable();\n        }\n\n        // Check if color comparison is disabled, if yes - remove transitions so everything keeps smoothly\n        if (!opt.comparison) {\n            root.button.style.transition = 'none';\n\n            if (!opt.useAsButton) {\n                root.preview.lastColor.style.transition = 'none';\n            }\n        }\n\n        this.hide();\n    }\n\n    _buildComponents() {\n\n        // Instance reference\n        const inst = this;\n        const cs = this.options.components;\n        const sliders = (inst.options.sliders || 'v').repeat(2);\n        const [so, sh] = sliders.match(/^[vh]+$/g) ? sliders : [];\n\n        // Re-assign if null\n        const getColor = () =>\n            this._color || (this._color = this._lastColor.clone());\n\n        const components = {\n\n            palette: Moveable({\n                element: inst._root.palette.picker,\n                wrapper: inst._root.palette.palette,\n\n                onstop: () => inst._emit('changestop', 'slider', inst),\n                onchange(x, y) {\n                    if (!cs.palette) {\n                        return;\n                    }\n\n                    const color = getColor();\n                    const {_root, options} = inst;\n                    const {lastColor, currentColor} = _root.preview;\n\n                    // Update the input field only if the user is currently not typing\n                    if (inst._recalc) {\n\n                        // Calculate saturation based on the position\n                        color.s = x * 100;\n\n                        // Calculate the value\n                        color.v = 100 - y * 100;\n\n                        // Prevent falling under zero\n                        color.v < 0 ? color.v = 0 : 0;\n                        inst._updateOutput('slider');\n                    }\n\n                    // Set picker and gradient color\n                    const cssRGBaString = color.toRGBA().toString(0);\n                    this.element.style.background = cssRGBaString;\n                    this.wrapper.style.background = `\n                        linear-gradient(to top, rgba(0, 0, 0, ${color.a}), transparent),\n                        linear-gradient(to left, hsla(${color.h}, 100%, 50%, ${color.a}), rgba(255, 255, 255, ${color.a}))\n                    `;\n\n                    // Check if color is locked\n                    if (!options.comparison) {\n                        _root.button.style.setProperty('--pcr-color', cssRGBaString);\n\n                        // If the user changes the color, remove the cleared icon\n                        _root.button.classList.remove('clear');\n                    } else if (!options.useAsButton && !inst._lastColor) {\n\n                        // Apply color to both the last and current color since the current state is cleared\n                        lastColor.style.setProperty('--pcr-color', cssRGBaString);\n                    }\n\n                    // Check if there's a swatch which color matches the current one\n                    const hexa = color.toHEXA().toString();\n                    for (const {el, color} of inst._swatchColors) {\n                        el.classList[hexa === color.toHEXA().toString() ? 'add' : 'remove']('pcr-active');\n                    }\n\n                    // Change current color\n                    currentColor.style.setProperty('--pcr-color', cssRGBaString);\n                }\n            }),\n\n            hue: Moveable({\n                lock: sh === 'v' ? 'h' : 'v',\n                element: inst._root.hue.picker,\n                wrapper: inst._root.hue.slider,\n\n                onstop: () => inst._emit('changestop', 'slider', inst),\n                onchange(v) {\n                    if (!cs.hue || !cs.palette) {\n                        return;\n                    }\n\n                    const color = getColor();\n\n                    // Calculate hue\n                    if (inst._recalc) {\n                        color.h = v * 360;\n                    }\n\n                    // Update color\n                    this.element.style.backgroundColor = `hsl(${color.h}, 100%, 50%)`;\n                    components.palette.trigger();\n                }\n            }),\n\n            opacity: Moveable({\n                lock: so === 'v' ? 'h' : 'v',\n                element: inst._root.opacity.picker,\n                wrapper: inst._root.opacity.slider,\n\n                onstop: () => inst._emit('changestop', 'slider', inst),\n                onchange(v) {\n                    if (!cs.opacity || !cs.palette) {\n                        return;\n                    }\n\n                    const color = getColor();\n\n                    // Calculate opacity\n                    if (inst._recalc) {\n                        color.a = Math.round(v * 1e2) / 100;\n                    }\n\n                    // Update color\n                    this.element.style.background = `rgba(0, 0, 0, ${color.a})`;\n                    components.palette.trigger();\n                }\n            }),\n\n            selectable: Selectable({\n                elements: inst._root.interaction.options,\n                className: 'active',\n\n                onchange(e) {\n                    inst._representation = e.target.getAttribute('data-type').toUpperCase();\n                    inst._recalc && inst._updateOutput('swatch');\n                }\n            })\n        };\n\n        this._components = components;\n    }\n\n    _bindEvents() {\n        const {_root, options} = this;\n\n        const eventBindings = [\n\n            // Clear color\n            _.on(_root.interaction.clear, 'click', () => this._clearColor()),\n\n            // Select last color on click\n            _.on([\n                _root.interaction.cancel,\n                _root.preview.lastColor\n            ], 'click', () => {\n                this.setHSVA(...(this._lastColor || this._color).toHSVA(), true);\n                this._emit('cancel');\n            }),\n\n            // Save color\n            _.on(_root.interaction.save, 'click', () => {\n                !this.applyColor() && !options.showAlways && this.hide();\n            }),\n\n            // User input\n            _.on(_root.interaction.result, ['keyup', 'input'], e => {\n\n                // Fire listener if initialization is finish and changed color was valid\n                if (this.setColor(e.target.value, true) && !this._initializingActive) {\n                    this._emit('change', this._color, 'input', this);\n                    this._emit('changestop', 'input', this);\n                }\n\n                e.stopImmediatePropagation();\n            }),\n\n            // Detect user input and disable auto-recalculation\n            _.on(_root.interaction.result, ['focus', 'blur'], e => {\n                this._recalc = e.type === 'blur';\n                this._recalc && this._updateOutput(null);\n            }),\n\n            // Cancel input detection on color change\n            _.on([\n                _root.palette.palette,\n                _root.palette.picker,\n                _root.hue.slider,\n                _root.hue.picker,\n                _root.opacity.slider,\n                _root.opacity.picker\n            ], ['mousedown', 'touchstart'], () => this._recalc = true, {passive: true})\n        ];\n\n        // Provide hiding / showing abilities only if showAlways is false\n        if (!options.showAlways) {\n            const ck = options.closeWithKey;\n\n            eventBindings.push(\n\n                // Save and hide / show picker\n                _.on(_root.button, 'click', () => this.isOpen() ? this.hide() : this.show()),\n\n                // Close with escape key\n                _.on(document, 'keyup', e => this.isOpen() && (e.key === ck || e.code === ck) && this.hide()),\n\n                // Cancel selecting if the user taps behind the color picker\n                _.on(document, ['touchstart', 'mousedown'], e => {\n                    if (this.isOpen() && !_.eventPath(e).some(el => el === _root.app || el === _root.button)) {\n                        this.hide();\n                    }\n                }, {capture: true})\n            );\n        }\n\n        // Make input adjustable if enabled\n        if (options.adjustableNumbers) {\n            const ranges = {\n                rgba: [255, 255, 255, 1],\n                hsva: [360, 100, 100, 1],\n                hsla: [360, 100, 100, 1],\n                cmyk: [100, 100, 100, 100]\n            };\n\n            _.adjustableInputNumbers(_root.interaction.result, (o, step, index) => {\n                const range = ranges[this.getColorRepresentation().toLowerCase()];\n\n                if (range) {\n                    const max = range[index];\n\n                    // Calculate next reasonable number\n                    const nv = o + (max >= 100 ? step * 1000 : step);\n\n                    // Apply range of zero up to max, fix floating-point issues\n                    return nv <= 0 ? 0 : Number((nv < max ? nv : max).toPrecision(3));\n                }\n\n                return o;\n            });\n        }\n\n        if (options.autoReposition && !options.inline) {\n            let timeout = null;\n            const that = this;\n\n            // Re-calc position on window resize, scroll and wheel\n            eventBindings.push(\n                _.on(window, ['scroll', 'resize'], () => {\n                    if (that.isOpen()) {\n\n                        if (options.closeOnScroll) {\n                            that.hide();\n                        }\n\n                        if (timeout === null) {\n                            timeout = setTimeout(() => timeout = null, 100);\n\n                            // Update position on every frame\n                            requestAnimationFrame(function rs() {\n                                that._rePositioningPicker();\n                                (timeout !== null) && requestAnimationFrame(rs);\n                            });\n                        } else {\n                            clearTimeout(timeout);\n                            timeout = setTimeout(() => timeout = null, 100);\n                        }\n                    }\n                }, {capture: true})\n            );\n        }\n\n        // Save bindings\n        this._eventBindings = eventBindings;\n    }\n\n    _rePositioningPicker() {\n        const {options} = this;\n\n        // No repositioning needed if inline\n        if (!options.inline) {\n            const success = this._nanopop.update({\n                container: document.body.getBoundingClientRect(),\n                position: options.position\n            });\n\n            if (!success) {\n                const el = this._root.app;\n                const eb = el.getBoundingClientRect();\n                el.style.top = `${(window.innerHeight - eb.height) / 2}px`;\n                el.style.left = `${(window.innerWidth - eb.width) / 2}px`;\n            }\n        }\n    }\n\n    _updateOutput(eventSource) {\n        const {_root, _color, options} = this;\n\n        // Check if component is present\n        if (_root.interaction.type()) {\n\n            // Construct function name and call if present\n            const method = `to${_root.interaction.type().getAttribute('data-type')}`;\n            _root.interaction.result.value = typeof _color[method] === 'function' ?\n                _color[method]().toString(options.outputPrecision) : '';\n        }\n\n        // Fire listener if initialization is finish\n        if (!this._initializingActive && this._recalc) {\n            this._emit('change', _color, eventSource, this);\n        }\n    }\n\n    _clearColor(silent = false) {\n        const {_root, options} = this;\n\n        // Change only the button color if it isn't customized\n        if (!options.useAsButton) {\n            _root.button.style.setProperty('--pcr-color', 'rgba(0, 0, 0, 0.15)');\n        }\n\n        _root.button.classList.add('clear');\n\n        if (!options.showAlways) {\n            this.hide();\n        }\n\n        this._lastColor = null;\n        if (!this._initializingActive && !silent) {\n\n            // Fire listener\n            this._emit('save', null);\n            this._emit('clear');\n        }\n    }\n\n    _parseLocalColor(str) {\n        const {values, type, a} = parseToHSVA(str);\n        const {lockOpacity} = this.options;\n        const alphaMakesAChange = a !== undefined && a !== 1;\n\n        // If no opacity is applied, add undefined at the very end which gets\n        // Set to 1 in setHSVA\n        if (values && values.length === 3) {\n            values[3] = undefined;\n        }\n\n        return {\n            values: (!values || (lockOpacity && alphaMakesAChange)) ? null : values,\n            type\n        };\n    }\n\n    _t(key) {\n        return this.options.i18n[key] || Pickr.I18N_DEFAULTS[key];\n    }\n\n    _emit(event, ...args) {\n        this._eventListener[event].forEach(cb => cb(...args, this));\n    }\n\n    on(event, cb) {\n        this._eventListener[event].push(cb);\n        return this;\n    }\n\n    off(event, cb) {\n        const callBacks = (this._eventListener[event] || []);\n        const index = callBacks.indexOf(cb);\n\n        if (~index) {\n            callBacks.splice(index, 1);\n        }\n\n        return this;\n    }\n\n    /**\n     * Appends a color to the swatch palette\n     * @param color\n     * @returns {boolean}\n     */\n    addSwatch(color) {\n        const {values} = this._parseLocalColor(color);\n\n        if (values) {\n            const {_swatchColors, _root} = this;\n            const color = HSVaColor(...values);\n\n            // Create new swatch HTMLElement\n            const el = _.createElementFromString(\n                `<button type=\"button\" style=\"--pcr-color: ${color.toRGBA().toString(0)}\" aria-label=\"${this._t('btn:swatch')}\"/>`\n            );\n\n            // Append element and save swatch data\n            _root.swatches.appendChild(el);\n            _swatchColors.push({el, color});\n\n            // Bind event\n            this._eventBindings.push(\n                _.on(el, 'click', () => {\n                    this.setHSVA(...color.toHSVA(), true);\n                    this._emit('swatchselect', color);\n                    this._emit('change', color, 'swatch', this);\n                })\n            );\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Removes a swatch color by it's index\n     * @param index\n     * @returns {boolean}\n     */\n    removeSwatch(index) {\n        const swatchColor = this._swatchColors[index];\n\n        // Check swatch data\n        if (swatchColor) {\n            const {el} = swatchColor;\n\n            // Remove HTML child and swatch data\n            this._root.swatches.removeChild(el);\n            this._swatchColors.splice(index, 1);\n            return true;\n        }\n\n        return false;\n    }\n\n    applyColor(silent = false) {\n        const {preview, button} = this._root;\n\n        // Change preview and current color\n        const cssRGBaString = this._color.toRGBA().toString(0);\n        preview.lastColor.style.setProperty('--pcr-color', cssRGBaString);\n\n        // Change only the button color if it isn't customized\n        if (!this.options.useAsButton) {\n            button.style.setProperty('--pcr-color', cssRGBaString);\n        }\n\n        // User changed the color so remove the clear clas\n        button.classList.remove('clear');\n\n        // Save last color\n        this._lastColor = this._color.clone();\n\n        // Fire listener\n        if (!this._initializingActive && !silent) {\n            this._emit('save', this._color);\n        }\n\n        return this;\n    }\n\n    /**\n     * Destroy's all functionalitys\n     */\n    destroy() {\n\n        // Cancel setup-frame if set\n        cancelAnimationFrame(this._setupAnimationFrame);\n\n        // Unbind events\n        this._eventBindings.forEach(args => _.off(...args));\n\n        // Destroy sub-components\n        Object.keys(this._components)\n            .forEach(key => this._components[key].destroy());\n    }\n\n    /**\n     * Destroy's all functionalitys and removes\n     * the pickr element.\n     */\n    destroyAndRemove() {\n        this.destroy();\n        const {root, app} = this._root;\n\n        // Remove element\n        if (root.parentElement) {\n            root.parentElement.removeChild(root);\n        }\n\n        // Remove .pcr-app\n        app.parentElement.removeChild(app);\n\n        // There are references to various DOM elements stored in the pickr instance\n        // This cleans all of them to avoid detached DOMs\n        Object.keys(this)\n            .forEach(key => this[key] = null);\n    }\n\n    /**\n     * Hides the color-picker ui.\n     */\n    hide() {\n        if (this.isOpen()) {\n            this._root.app.classList.remove('visible');\n            this._emit('hide');\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Shows the color-picker ui.\n     */\n    show() {\n        if (!this.options.disabled && !this.isOpen()) {\n            this._root.app.classList.add('visible');\n            this._rePositioningPicker();\n            this._emit('show', this._color);\n            return this;\n        }\n\n        return false;\n    }\n\n    /**\n     * @return {boolean} If the color picker is currently open\n     */\n    isOpen() {\n        return this._root.app.classList.contains('visible');\n    }\n\n    /**\n     * Set a specific color.\n     * @param h Hue\n     * @param s Saturation\n     * @param v Value\n     * @param a Alpha channel (0 - 1)\n     * @param silent If the button should not change the color\n     * @return boolean if the color has been accepted\n     */\n    setHSVA(h = 360, s = 0, v = 0, a = 1, silent = false) {\n\n        // Deactivate color calculation\n        const recalc = this._recalc; // Save state\n        this._recalc = false;\n\n        // Validate input\n        if (h < 0 || h > 360 || s < 0 || s > 100 || v < 0 || v > 100 || a < 0 || a > 1) {\n            return false;\n        }\n\n        // Override current color and re-active color calculation\n        this._color = HSVaColor(h, s, v, a);\n\n        // Update slider and palette\n        const {hue, opacity, palette} = this._components;\n        hue.update((h / 360));\n        opacity.update(a);\n        palette.update(s / 100, 1 - (v / 100));\n\n        // Check if call is silent\n        if (!silent) {\n            this.applyColor();\n        }\n\n        // Update output if recalculation is enabled\n        if (recalc) {\n            this._updateOutput();\n        }\n\n        // Restore old state\n        this._recalc = recalc;\n        return true;\n    }\n\n    /**\n     * Tries to parse a string which represents a color.\n     * Examples: #fff\n     *           rgb 10 10 200\n     *           hsva 10 20 5 0.5\n     * @param string\n     * @param silent\n     */\n    setColor(string, silent = false) {\n\n        // Check if null\n        if (string === null) {\n            this._clearColor(silent);\n            return true;\n        }\n\n        const {values, type} = this._parseLocalColor(string);\n\n        // Check if color is ok\n        if (values) {\n\n            // Change selected color format\n            const utype = type.toUpperCase();\n            const {options} = this._root.interaction;\n            const target = options.find(el => el.getAttribute('data-type') === utype);\n\n            // Auto select only if not hidden\n            if (target && !target.hidden) {\n                for (const el of options) {\n                    el.classList[el === target ? 'add' : 'remove']('active');\n                }\n            }\n\n            // Update color (fires 'save' event if silent is 'false')\n            if (!this.setHSVA(...values, silent)) {\n                return false;\n            }\n\n            // Update representation (fires 'change' event)\n            return this.setColorRepresentation(utype);\n        }\n\n        return false;\n    }\n\n    /**\n     * Changes the color _representation.\n     * Allowed values are HEX, RGB, HSV, HSL and CMYK\n     * @param type\n     * @returns {boolean} if the selected type was valid.\n     */\n    setColorRepresentation(type) {\n\n        // Force uppercase to allow a case-sensitiv comparison\n        type = type.toUpperCase();\n\n        // Find button with given type and trigger click event\n        return !!this._root.interaction.options\n            .find(v => v.getAttribute('data-type').startsWith(type) && !v.click());\n    }\n\n    /**\n     * Returns the current color representaion. See setColorRepresentation\n     * @returns {*}\n     */\n    getColorRepresentation() {\n        return this._representation;\n    }\n\n    /**\n     * @returns HSVaColor Current HSVaColor object.\n     */\n    getColor() {\n        return this._color;\n    }\n\n    /**\n     * Returns the currently selected color.\n     * @returns {{a, toHSVA, toHEXA, s, v, h, clone, toCMYK, toHSLA, toRGBA}}\n     */\n    getSelectedColor() {\n        return this._lastColor;\n    }\n\n    /**\n     * @returns The root HTMLElement with all his components.\n     */\n    getRoot() {\n        return this._root;\n    }\n\n    /**\n     * Disable pickr\n     */\n    disable() {\n        this.hide();\n        this.options.disabled = true;\n        this._root.button.classList.add('disabled');\n        return this;\n    }\n\n    /**\n     * Enable pickr\n     */\n    enable() {\n        this.options.disabled = false;\n        this._root.button.classList.remove('disabled');\n        return this;\n    }\n}\n", "export default require(\"./node_modules/@simonwep/pickr/dist/pickr.min.js\");"],
  "mappings": "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",
  "names": []
}
